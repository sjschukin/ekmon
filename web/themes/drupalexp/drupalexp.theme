<?php

/**
 * @file
 * Functions to support theming in the Drupalexp theme.
 */

use Drupal\Core\Template\Attribute;
use Drupal\Core\Render\Markup;
use Drupal\Component\Utility\Html;
use Drupal\drupalexp\DrupalExp;
use Drupal\drupalexp\Layout;
use Drupal\drupalexp\Preset;
use Drupal\drupalexp\Font;

/**
 * Implements hook_theme
 */
function drupalexp_theme($existing, $type, $theme, $path) {
  return [
    'section' => [
      'template' => 'section',
      'pattern' => 'section__',
      'preprocess functions' => [
        'template_preprocess',
        'template_preprocess_section',
      ],
      'process functions' => [
        'template_process',
        'template_process_section',
      ],

      'variables' => [
        'attributes' => [],
        'content' => '',
        'section' => '',
      ]
    ],
  ];
}

function drupalexp_page_attachments_alter(array &$attachments) {
  if(isset($attachments['#attached']['drupalSettings']['colorbox'])){
    $attachments['#attached']['drupalSettings']['colorbox']['returnFocus'] = false;
  }
}

/**
 * Implement hook_preprocess_html
 */
function drupalexp_preprocess_html(&$html){
  $theme = DrupalExp::get();
  if($layout = $theme->getSetting('drupalexp_layout','')){
    $html['attributes']['class'][] = $layout;
  }
  if($dir = $theme->getSetting('drupalexp_direction', '')){
    $html['attributes']['dir'] = $dir;
    $html['html_attributes']['dir'] = $dir;
  }
  if($custom_class = $theme->getSetting('drupalexp_custom_html_class','')){
    $html['attributes']['class'][] = $custom_class;
  }
  $html['page_loading'] = $theme->getSetting('features.page_loading',0);
  $html['goto_top'] = $theme->getSetting('features.goto_top',0);
  if($node = \Drupal::routeMatch()->getParameter('node')){
    $nodeInterface = '\Drupal\node\NodeInterface';
    if($node instanceof $nodeInterface){
      $html['body_class'] = 'page-node-' . $node->id();
    }
  }
  $preset = $theme->getPreset();
  foreach($preset as $key=>$color){
    if($key == 'base_color'){
      $theme_color = $color['value'];
    } 
  }
  //Chrome, Firefox OS and Opera
  $theme_color_meta = [
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'theme-color',
      'content' => $theme_color,
    ],
  ];
  //iOS Safari
  $theme_color_meta_ios = [
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'apple-mobile-web-app-status-bar-style',
      'content' => $theme_color,
    ],
  ];
  //Windows Phone
  $theme_color_meta_windows = [
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'msapplication-navbutton-color',
      'content' => $theme_color,
    ],
  ];
  $html['page']['#attached']['html_head'][] = [$theme_color_meta, 'theme-color'];
  $html['page']['#attached']['html_head'][] = [$theme_color_meta_ios, 'theme-color-ios'];
  $html['page']['#attached']['html_head'][] = [$theme_color_meta_windows, 'theme-color-windows'];
}

/**
 * Implement hook_preprocess_page
 */
function drupalexp_preprocess_page(&$page){
  $theme = DrupalExp::get($page);
  $preset = $theme->getPreset();
  foreach($preset as $key => $color){
    $page['#attached']['drupalSettings']['drupalexp'][$key] = $color['value'];
  }
  $page['#attached']['library'][] = 'drupalexp/base';
  $page['#attached']['library'][] = 'drupalexp/bootstrap';
  $page['#attached']['library'][] = 'drupalexp/font-awesome';
  $preset_key = $theme->getPresetKey();
  if($node = \Drupal::routeMatch()->getParameter('node')){
    if(\Drupal::service('module_handler')->moduleExists('dexp_page_settings')){
      $settings = new \Drupal\dexp_page_settings\DexpPageSettings($node->id());
      $preset_key = $settings->get('node_custom_preset', $preset_key);
    }
  }
  $preset_key_bak = $preset_key;
  $preset_key = \Drupal::request()->query->get('preset',$preset_key);
  if(!$theme->setPresetKey($preset_key)){
    $preset_key = $preset_key_bak;
    $theme->setPresetKey($preset_key);
  }
  $page['#attached']['drupalSettings']['drupalexp']['preset'] = $preset_key;
  $library = $theme->safeName($preset_key);
  $page['#attached']['library'][] = 'drupalexp/drupalexp.'.$theme->getTheme()->getName().$library;
	$page_content = $theme->render();
	if(empty($page_content)){
		$page_content = $page['page']['content'];
	}
  $page['page']['page_content']  = $page_content;
  $page['attributes']['class'][] = 'dexp-body-inner';
  $page['attributes']['class'][] = \Drupal\Component\Utility\Html::getClass('layout-' . $theme->getActiveLayout()->key);
  $page['attributes']['class'][] = \Drupal\Component\Utility\Html::getClass('preset-' . $preset_key);
}

function template_preprocess_section(&$variables){
  $section = $variables['section'];
  $variables['attributes_container'] = array();
  $variables['attributes_row'] = array();
  if($section->sticky){
    $variables['attributes']['class'][] = 'dexp-sticky';
    $variables['#attached']['library'][] = 'drupalexp/sticky';
    if(isset($section->sticky_disable_mobile) && $section->sticky_disable_mobile){
      $variables['attributes']['class'][] = 'unsticky-mobile';
    }
  }
  $variables['attributes']['id'] = Html::getUniqueId('section-'.$section->key);
  $variables['attributes']['class'][] = 'dexp-section';
  if($section->custom_class){
    $variables['attributes']['class'][] = $section->custom_class;
  }
  if(isset($section->custom_row_class) && $section->custom_row_class){
    $variables['attributes_row']['class'][] = $section->custom_row_class;
  }
  $variables['container_class'] = $section->fullwidth == 'no' ? 'container' : 'dexp-container';
  if (isset($section->backgroundcolor) && $section->backgroundcolor) {
    $variables['attributes']['style'] = "background-color:{$section->backgroundcolor}";
  }
  if (isset($section->colpadding) && $section->colpadding != '' && $section->colpadding != 15 && $section->colpadding >= 0) {
    $variables['attributes']['data-padding'] = $section->colpadding;
    $variables['attributes']['class'][] = 'custompadding';
  }
  /*
  if($section->hdesktop){
    $variables['attributes']['class'][] = 'hidden-md hidden-lg';
  }
  if($section->htablet){
    $variables['attributes']['class'][] = 'hidden-sm';
  }
  if($section->hphone){
    $variables['attributes']['class'][] = 'hidden-xs';
  }
  if($section->vdesktop){
    $variables['attributes']['class'][] = 'visible-md visible-lg';
  }
  if($section->vtablet){
    $variables['attributes']['class'][] = 'visible-sm';
  }
  if($section->vphone){
    $variables['attributes']['class'][] = 'visible-xs';
  }
  */
  $variables['attributes_row'] = new \Drupal\Core\Template\Attribute($variables['attributes_row']);
  $variables['attributes_container'] = new \Drupal\Core\Template\Attribute($variables['attributes_container']);
}

function drupalexp_preprocess_region(&$variables) {
  $drupalexp = DrupalExp::get();
  $region_key = $variables['elements']['#region'];

  $region = $drupalexp->getRegionByKey($region_key);
  $variables['attributes']['class'][] = 'dexp-region';
  if ($region) {
    $prev_size = '';
    foreach(array('xs', 'sm', 'md', 'lg', 'xl') as $screen){
      $size = 'col' . $screen;
      if($screen == 'xs'){
        if(empty($region->{$size})){
          $variables['attributes']['class'][] = 'col';
        }else{
          $variables['attributes']['class'][] = 'col-' . $region->{$size};
        }
      }else{
        if(!isset($region->{$size})){
            break;
        }elseif($region->{$size} != 'not-set' && $region->{$size} != $prev_size){
          if(empty($region->{$size})){
            $variables['attributes']['class'][] = 'col-' . $screen;
          }else{
            $variables['attributes']['class'][] = 'col-' . $screen . '-' . $region->{$size};
          }
        }
      }
      $prev_size = $region->{$size};
    }
		if(isset($region->custom_class)){
    	$variables['attributes']['class'][] = $region->custom_class;
		}
    if(isset($region->colxloffset) && $region->colxloffset){
      $variables['attributes']['class'][] = 'offset-xl-' . $region->colxloffset;
    }
    if(isset($region->collgoffset) && $region->collgoffset){
      $variables['attributes']['class'][] = 'offset-lg-' . $region->collgoffset;
    }
    if(isset($region->colmdoffset) && $region->colmdoffset){
      $variables['attributes']['class'][] = 'offset-md-' . $region->colmdoffset;
    }
    if(isset($region->colsmoffset) && $region->colsmoffset){
      $variables['attributes']['class'][] = 'offset-sm-' . $region->colsmoffset;
    }
    if(isset($region->colxsoffset) && $region->colxsoffset){
      $variables['attributes']['class'][] = 'offset-xs-' . $region->colxsoffset;
    }
  }
}

function drupalexp_form_system_theme_settings_alter(&$form, &$form_state) {
  $theme = DrupalExp::get();
  $form['drupalexp_theme_settings'] = [
      '#type' => 'vertical_tabs',
      '#parents' => ['drupalexp_theme_settings'],
  ];
  $form['theme_settings']['#group'] = 'drupalexp_theme_settings';
  $form['theme_settings']['toggle_page_loading'] = array(
    '#title' => t('Enable Page Loading'),
    '#type' => 'checkbox',
    '#default_value' => $theme->getSetting('features.page_loading',0),
  );
  $form['theme_settings']['toggle_goto_top'] = array(
    '#title' => t('Add go to top button'),
    '#type' => 'checkbox',
    '#default_value' => $theme->getSetting('features.goto_top',0),
  );
  $form['favicon']['#group'] = 'drupalexp_theme_settings';
  $form['logo']['#group'] = 'drupalexp_theme_settings';
  Layout::alterForm($form);
  Preset::alterForm($form);
  Font::alterForm($form);
  /*
  $form['drupalexp_less_settings'] = array(
    '#type' => 'details',
    '#title' => t('Less CSS'),
    '#group' => 'drupalexp_theme_settings',
    '#weight' => 0
  );

  $form['drupalexp_less_settings']['dev_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Dev mode'),
    '#description' => t('Complie LESS CSS to CSS. It require "less.php" library. To install, run command: composer require oyejorge/less.php:\'~1.7.0.9\''),
    '#default_value' => $theme->getSetting('dev_mode'),
  );

  $form['drupalexp_less_settings']['css_output_location'] = array(
    '#type' => 'select',
    '#title' => t('CSS out put location'),
    '#options' => array('theme' => t('Theme assets folder'), 'public' => 'Public files folder'),
    '#default_value' => $theme->getSetting('css_output_location'),
  );
  */
  $form['drupal_content_settings'] = array(
    '#type' => 'details',
    '#title' => t('Content display settings'),
    '#group' => 'drupalexp_theme_settings',
    '#weight' => 0
	);
  if(\Drupal::service('module_handler')->moduleExists('dexp_page_settings')){
    $form['drupal_content_settings']['view_mode'] = array(
      '#type' => 'details',
      '#title' => t('Individual Page View Mode'),
      '#description' => t('Default view mode for content when is displayed on its own page page'),
    );

    foreach(drupalexp_get_content_type_view_modes() as $content_type => $content_viewmodes){
      $form['drupal_content_settings']['view_mode'][$content_type . '_view_mode'] = array(
        '#type' => 'select',
        '#title' => $content_viewmodes['title'],
        '#options' => $content_viewmodes['viewmodes'],
        '#default_value' => $theme->getSetting($content_type . '_view_mode','default'),
      );
    }
  }

  $form['drupal_basic_settings'] = array(
    '#type' => 'details',
    '#title' => t('Basic'),
    '#group' => 'drupalexp_theme_settings',
    '#weight' => 0
	);
  $form['drupal_basic_settings']['drupalexp_layout'] = array(
    '#type' => 'select',
    '#title' => t('Page Layout'),
    '#options' =>['wide' => t('Wide'), 'boxed' => t('Boxed')],
    '#default_value' => $theme->getSetting('drupalexp_layout', 'wide'),
  );
  $form['drupal_basic_settings']['drupalexp_direction'] = array(
    '#type' => 'select',
    '#title' => t('Direction'),
    '#options' =>[''=>t('Default') . ' (' . t('current language direction') . ')', 'ltr' => 'LTR (' . t('Left to right') .')', 'rtl' => 'RTL ('. t('Right to left') . ')'],
    '#default_value' => $theme->getSetting('drupalexp_direction', ''),
  );
  $form['drupal_basic_settings']['drupalexp_custom_html_class'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom HTML class'),
    '#description' =>t('Add custom class to body tag.'),
    '#default_value' => $theme->getSetting('drupalexp_custom_html_class', ''),
  );
  $form['#attached']['library'][] = 'drupalexp/theme-settings';
}

function drupalexp_get_content_type_view_modes(){
  $contentTypes = \Drupal::service('entity.manager')->getStorage('node_type')->loadMultiple();
  $viewmodes = \Drupal::entityManager()->getViewModes('node');

  $return = [];
  foreach ($contentTypes as $contentType) {
    $node_type = $contentType->id();
    $active_viewmodes = \Drupal::service('config.factory')->listAll('core.entity_view_display.node.'. $node_type. '.');
    $contentViewModes = ['title' => $contentType->label()];
    foreach($active_viewmodes as $active_viewmode){
      $viewmode_id = substr($active_viewmode, strrpos($active_viewmode, '.') + 1);
      $contentViewModes['viewmodes'][$viewmode_id] = $viewmode_id == 'default'?t('Default'):$viewmodes[$viewmode_id]['label'];
    }
    $return[$node_type] = $contentViewModes;
  }
  return $return;
}

/**
 * Implements hook_library_info_build().
 * @return array
 */
function drupalexp_library_info_build(){
  $theme = DrupalExp::get();
  $libraries = [];
  foreach($theme->getPresets() as $preset_key => $preset){
    $css_file = $theme->getCssFile($preset_key);
    $library = $theme->safeName($preset_key);
    $libraries['drupalexp.' . $theme->getTheme()->getName() . $library ] = [
      'css' => [
        'base' => [
          $css_file => [],
        ],
      ],
    ];
  }
  return $libraries;
}

/**
 * Implements hook_library_info_alter().
 */
function drupalexp_library_info_alter(&$libraries, $extension) {
  if ($extension == 'drupalexp' && \Drupal::moduleHandler()->moduleExists('libraries')) {
    if($path = libraries_get_path('bootstrap')){
      $libraries['bootstrap']['js'] = [
        'assets/js/jquery.fix.js' => [],
        'assets/js/popper.min.js' => [],
        '/' . $path . '/js/bootstrap.min.js' => [],
      ];
      $libraries['bootstrap']['css']['base'] = [
        '/' . $path . '/css/bootstrap.min.css' => [],
      ];
    }
  }
}

/**
 * Implement hook_theme_suggestions_HOOK_alter
 */
function drupalexp_theme_suggestions_section_alter(array &$suggestions, array &$variables){
  $suggestions[] = 'section__' . str_replace('-', '_', $variables['section']->key);
}

function drupalexp_preprocess_input(&$variables) {
  $element = $variables['element'];
  if(in_array($element['#type'], ['search', 'textfield', 'select', 'entity_autocomplete', 'password', 'date', 'time', 'number', 'tel', 'email'])){
    $variables['attributes']['class'][] = 'form-control';
  }
  if(in_array($element['#type'], ['submit', 'button'])){
    $variables['attributes']['class'][] = 'btn';
    if(isset($element['#button_type']) && $element['#button_type'] == 'primary'){
      $variables['attributes']['class'][] = 'btn-primary';
    }elseif (isset($element['#value'])) {
      $classes = array(
        'Save' => 'btn-primary',
        'Apply' => 'btn-primary',
        'Submit' => 'btn-primary',
        'Search' => 'btn-primary',
        'Log in' => 'btn-primary',
        'Save and publish' => 'btn-primary',
        'Preview' => 'btn-info',
        'Delete' => 'btn-danger',
      );
      foreach ($classes as $search => $class) {
        $value = is_object($element['#value'])?$element['#value']->__toString():$element['#value'];
        if (strpos($element['#value'], $search) !== FALSE) {
          $variables['attributes']['class'][] = $class;
          break;
        }
        $variables['attributes']['class'][] = 'btn-default';
      }
    }
  }
}

function drupalexp_preprocess_select(&$variables) {
  $variables['attributes']['class'][] = 'form-control';
}

function drupalexp_preprocess_textarea(&$variables) {
  $variables['attributes']['class'][] = 'form-control';
}

function drupalexp_preprocess_table(&$variables) {
  $variables['attributes']['class'][] = 'table';
}